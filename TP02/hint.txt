////////
m 6
3 1 2 3
3 0 2 4
3 0 1 5
1 0
1 1
1 2

1 2 3 2 1 1

-------------
0 4 5 | 1 3 | 2


// Sol 1 -> Para cada vertice adcionamos ao conjunto
// vertice menores que o vertice atual. Ao final de percorrer
// a vetor de adjacencia verificamos o tamanho do conjunto que
// deve ser igual a cor_atual - 1;

    -> Necessario implementar um set, utilizando arvore binaria
    de busca.
    -> Custo: 
        -> Para cada vertice, temos: Se é uma coloração menor,
        inserimos na arvore (O(log h)) => Para cada lista temos,
        portanto, O(a * log h). Algoritmo completo => O(n * a * log h)

// Sol 2 -> Implementação prévia. Para cada vetor de adjacencia
// ordenavamos e verificamos se havia buraco e o vertice corrente é
// no maximo +1 do que o que estava.

    -> Detalhe de implementação complicada( Solucao implementada não
    tinha o contador estavel).
    -> Custo:
        -> Para cada vetor de adjacencia => ordenacao(O(a * log a)).
        Algoritmo completo => O(n * a * log a)

// Sol 3 -> Counting Sorting SOL => Temos a coloração do vertice
// atual entao sabemos o intervalo o qual queremos analisar [0, n)
// Para aquelas colorações menores que a corrente marcamos como 
// visitados no vetor de visitados. Ao final de percorrer o vetor
// de adjacencia verificamos se há buracos
    
        -> Necessario implementar um vetor de visitados. Custo de 
        memória adcional pode ser muito grande, no caso de a cor.
        -> Custo:
            -> Para cada vertice, temos: Se é uma coloração menor,
            marcamos no vetor auxiliar (O(1)) => Para cada lista
            temos, portanto, O(a). Algoritmo completo => O(n * a)
            -> Custo de memória: O(n)

// Sol 4 (Pensando sobre ainda) => Leva em condiração a quantidade
// de cores que temos para cada vertice. Podemos fazer algo parecido
// com o counting sort, mas ao inves de instanciar um vetor de 
// tamanho da coloração, instanciamos um vetor de tamanho da quantidade
// de cores que temos. 
