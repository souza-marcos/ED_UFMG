1. Múltiplos vazamentos de memória

2. Utilizando o valgrind, Confirmei minha hipótese.

==122681== Memcheck, a memory error detector
==122681== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==122681== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==122681== Command: ./main
==122681== 
==122681== 
==122681== HEAP SUMMARY:
==122681==     in use at exit: 35 bytes in 2 blocks
==122681==   total heap usage: 3 allocs, 1 frees, 47 bytes allocated
==122681== 
==122681== 16 bytes in 1 blocks are definitely lost in loss record 1 of 2
==122681==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==122681==    by 0x1091A6: main (c13.c:11)
==122681== 
==122681== 19 bytes in 1 blocks are definitely lost in loss record 2 of 2
==122681==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==122681==    by 0x10917E: main (c13.c:8)
==122681== 
==122681== LEAK SUMMARY:
==122681==    definitely lost: 35 bytes in 2 blocks
==122681==    indirectly lost: 0 bytes in 0 blocks
==122681==      possibly lost: 0 bytes in 0 blocks
==122681==    still reachable: 0 bytes in 0 blocks
==122681==         suppressed: 0 bytes in 0 blocks
==122681== 
==122681== For lists of detected and suppressed errors, rerun with: -s
==122681== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)


3. Adicionei free após cada malloc.

4. Verificado que não possui mais erros. 

==122758== Memcheck, a memory error detector
==122758== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==122758== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==122758== Command: ./main
==122758== 
==122758== 
==122758== HEAP SUMMARY:
==122758==     in use at exit: 0 bytes in 0 blocks
==122758==   total heap usage: 3 allocs, 3 frees, 47 bytes allocated
==122758== 
==122758== All heap blocks were freed -- no leaks are possible
==122758== 
==122758== For lists of detected and suppressed errors, rerun with: -s
==122758== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
